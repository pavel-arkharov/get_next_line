/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   tests_basic_main.test                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: saaltone <saaltone@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/12/02 13:44:55 by saaltone          #+#    #+#             */
/*   Updated: 2021/12/08 18:21:44 by saaltone         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef GNL_TESTS_H

# define GNL_TESTS_H
# define COLOR_GREEN "\033[0;32m"
# define COLOR_RED "\033[0;31m"
# define COLOR_PURPLE "\033[0;35m"
# define COLOR_CYAN "\033[0;36m"
# define COLOR_RESET "\033[0m"

#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <fcntl.h>

int	get_next_line(const int fd, char **line);

#endif

int	main(void)
{
	char 	*line;
	int		out;
	int		pipe_ends[2];
	int		fd;

	printf("%s%s%s", COLOR_CYAN, "1. 8 characters ending by new line from standard output ", COLOR_RESET);

	fd = 1;

	// Duplicating stdout fd
	out = dup(fd);

	// Piping pipe_ends[0] (read) pipe_ends[1] (write)
	pipe(pipe_ends);

	// Duplicating fd 1 to pipe_ends[1]
	dup2(pipe_ends[1], fd);

	// Write stuff to fd (stdout)
	write(fd, "12345678\n", 9);

	// Duplicating fd to out
	dup2(out, fd);

	// Close the pipe (write)
	close(pipe_ends[1]);

	// Reading from p[0] with GNL (piped from p[1])
	get_next_line(pipe_ends[0], &line);

	if (!strcmp(line, "12345678"))
		printf("%s%s%s", COLOR_GREEN, "OK ", COLOR_RESET);
	else
		printf("%s%s%s", COLOR_RED, "KO ", COLOR_RESET);

	printf("%s%s%s", COLOR_CYAN, "\n2. Two lines of 8 characters ending by new line from standard output ", COLOR_RESET);

	out = dup(fd);
	pipe(pipe_ends);

	dup2(pipe_ends[1], fd);
	write(fd, "12345678\nAAAABBBB\n", 18);
	dup2(out, fd);
	close(pipe_ends[1]);
	get_next_line(pipe_ends[0], &line);

	if (!strcmp(line, "12345678"))
		printf("%s%s%s", COLOR_GREEN, "Line 1 OK ", COLOR_RESET);
	else
		printf("%s%s%s", COLOR_RED, "Line 1 KO ", COLOR_RESET);

	get_next_line(pipe_ends[0], &line);

	if (!strcmp(line, "AAAABBBB"))
		printf("%s%s%s", COLOR_GREEN, "Line 2 OK ", COLOR_RESET);
	else
		printf("%s%s%s", COLOR_RED, "Line 2 KO ", COLOR_RESET);

	printf("%s%s%s", COLOR_CYAN, "\n3. Three lines of 8 characters ending by new line from standard output ", COLOR_RESET);

	out = dup(fd);
	pipe(pipe_ends);

	dup2(pipe_ends[1], fd);
	write(fd, "12345678\nAAAABBBB\nCCCCDDDD\n", 27);
	dup2(out, fd);
	close(pipe_ends[1]);
	get_next_line(pipe_ends[0], &line);

	if (!strcmp(line, "12345678"))
		printf("%s%s%s", COLOR_GREEN, "Line 1 OK ", COLOR_RESET);
	else
		printf("%s%s%s", COLOR_RED, "Line 1 KO ", COLOR_RESET);

	get_next_line(pipe_ends[0], &line);

	if (!strcmp(line, "AAAABBBB"))
		printf("%s%s%s", COLOR_GREEN, "Line 2 OK ", COLOR_RESET);
	else
		printf("%s%s%s", COLOR_RED, "Line 2 KO ", COLOR_RESET);

	get_next_line(pipe_ends[0], &line);

	if (!strcmp(line, "CCCCDDDD"))
		printf("%s%s%s", COLOR_GREEN, "Line 3 OK ", COLOR_RESET);
	else
		printf("%s%s%s", COLOR_RED, "Line 3 KO ", COLOR_RESET);

	printf("%s%s%s", COLOR_CYAN, "\n4. 8 characters ending by new line from a file ", COLOR_RESET);

	fd = open("testfiles/basic_1", O_RDONLY);
	get_next_line(fd, &line);

	if (!strcmp(line, "12345678"))
		printf("%s%s%s", COLOR_GREEN, "OK ", COLOR_RESET);
	else
		printf("%s%s%s", COLOR_RED, "KO ", COLOR_RESET);

	close(fd);

	printf("%s%s%s", COLOR_CYAN, "\n5. Two lines of 8 characters ending by new line from a file ", COLOR_RESET);

	fd = open("testfiles/basic_2", O_RDONLY);
	get_next_line(fd, &line);

	if (!strcmp(line, "12345678"))
		printf("%s%s%s", COLOR_GREEN, "Line 1 OK ", COLOR_RESET);
	else
		printf("%s%s%s", COLOR_RED, "Line 1 KO ", COLOR_RESET);

	get_next_line(fd, &line);

	if (!strcmp(line, "87654321"))
		printf("%s%s%s", COLOR_GREEN, "Line 2 OK ", COLOR_RESET);
	else
		printf("%s%s%s", COLOR_RED, "Line 2 KO ", COLOR_RESET);

	close(fd);

	printf("%s%s%s", COLOR_CYAN, "\n6. Three lines of 8 characters ending by new line from a file ", COLOR_RESET);

	fd = open("testfiles/basic_3", O_RDONLY);
	get_next_line(fd, &line);

	if (!strcmp(line, "12345678"))
		printf("%s%s%s", COLOR_GREEN, "Line 1 OK ", COLOR_RESET);
	else
		printf("%s%s%s", COLOR_RED, "Line 1 KO ", COLOR_RESET);

	get_next_line(fd, &line);

	if (!strcmp(line, "00000000"))
		printf("%s%s%s", COLOR_GREEN, "Line 2 OK ", COLOR_RESET);
	else
		printf("%s%s%s", COLOR_RED, "Line 2 KO ", COLOR_RESET);
	
	get_next_line(fd, &line);

	if (!strcmp(line, "AAAAAAAA"))
		printf("%s%s%s", COLOR_GREEN, "Line 3 OK ", COLOR_RESET);
	else
		printf("%s%s%s", COLOR_RED, "Line 3 KO ", COLOR_RESET);

	return (0);
}